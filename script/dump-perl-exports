#!perl

use strict;
use warnings;

use App::perlimports::ExportInspector ();
use Data::Printer;
use List::Util qw( max );
use Log::Dispatch ();
use Pod::Usage qw( pod2usage );
use Text::SimpleTable::AutoWidth ();

my $module_name = shift @ARGV;

if ( !$module_name || $module_name eq '--help' ) {
    print pod2usage();
    exit;
}

my $logger
    = Log::Dispatch->new( outputs => [ [ 'Screen', min_level => 'error' ] ] );
my $ei = App::perlimports::ExportInspector->new(
    logger      => $logger,
    module_name => $module_name,
);

my $exports = $ei->explicit_exports;

if ( $ei->is_oo_class ) {
    print 'Appears to be an Object Oriented class.' . "\n";
}

if ( !keys %{$exports} ) {
    print 'No exported symbols found' . "\n";
    exit(0);
}

my $inspection = $ei->inspection;

if ( $inspection->has_class_isa ) {
    my $t = Text::SimpleTable::AutoWidth->new();
    $t->captions( ['ISA'] );
    for my $class ( @{ $inspection->class_isa } ) {
        $t->row($class);
    }
    print $t->draw;
}

if ( $ei->has_export_tags ) {
    my %tags = %{ $ei->export_tags };
    my @keys = keys %tags;

    my @headings = ( 'Export Tag', 'Exported Symbols' );

    my $col1_width = max map { length($_) } @keys, $headings[0];
    my $col2_width = max map { length($_) } map ( { @{$_} } values %tags ),
        $headings[1];

    my $t = Text::SimpleTable->new(
        [ $col1_width, 'Export Tag' ],
        [ $col2_width, 'Exported Symbols' ]
    );

    my $i = 0;
    for my $key ( sort @keys ) {
        $t->row( $key, join "\n", sort @{ $tags{$key} } );
        ++$i;
        $t->hr if $i < scalar @keys;
    }
    print $t->draw;
}

if ( $ei->has_default_exports ) {
    my $t = Text::SimpleTable::AutoWidth->new();
    if ( $inspection->default_imports_match_exports ) {
        $t->captions( ['Default Exported Symbols'] );
        for my $symbol ( sort $inspection->default_export_names ) {
            $t->row($symbol);
        }
    }
    else {
        $t->captions( [ 'Default Export Symbol', 'Import Name' ] );
        for my $key ( sort $inspection->default_export_names ) {
            $t->row( $key, $inspection->default_exports->{$key} );
        }
    }
    print $t->draw;
    printf( "%i symbols\n", scalar $inspection->default_export_names );
}

{
    my $t = Text::SimpleTable::AutoWidth->new();

    if ( $inspection->all_imports_match_exports ) {
        $t->captions( ['All Exportable Symbols'] );
        for my $symbol ( sort $inspection->all_export_names ) {
            $t->row($symbol);
        }
    }
    else {
        $t->captions( [ 'Explicit Export Symbol', 'Import Name' ] );
        for my $key ( sort $inspection->all_export_names ) {
            $t->row( $key, $exports->{$key} );
        }
    }
    print $t->draw;
    printf( "%i symbols\n", scalar $inspection->all_export_names );
}

if ( $ei->has_export_fail ) {
    my $t = Text::SimpleTable::AutoWidth->new();
    $t->captions( ['@EXPORT_FAIL'] );
    for my $val ( sort @{ $ei->export_fail } ) {
        $t->row($val);
    }
    print $t->draw;
}

# PODNAME: dump-perl-exports
# ABSTRACT: A command line utility for describing what a class exports

=pod

=head1 SYNOPSIS

Here are a few interesting modules to help you understand the output of
C<dump-perl-exports>.

    dump-perl-exports POSIX

    dump-perl-exports Getopt::Long

    dump-perl-exports Getopt::Long::Descriptive

    dump-perl-exports Test::More

    dump-perl-exports Test::Most

    dump-perl-exports Moose

    dump-perl-exports Moo

=cut
